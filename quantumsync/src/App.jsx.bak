import React, { useState, useEffect, useRef } from "react";
import { Upload, Settings, Activity, Sun, Moon, BarChart, Box, CheckCircle, XCircle, Clock } from "lucide-react";
import "./App.css";
import Statistics from "./components/Statistics";

export default function App() {
  // State management
  const [activeTab, setActiveTab] = useState("stats");
  const [history, setHistory] = useState([
    { timestamp: new Date(), status: "success", fileType: "pdf", processingTime: 1200 },
    { timestamp: new Date(), status: "success", fileType: "doc", processingTime: 800 },
    { timestamp: new Date(), status: "failure", fileType: "pdf", processingTime: 1500 }
  ]);
  const [stats, setStats] = useState({ total: 3, avgTime: 1166, successRate: 66 });
  const [resumeWebhook, setResumeWebhook] = useState("");
  const [invoiceWebhook, setInvoiceWebhook] = useState("");
  const [toast, setToast] = useState({ show: false, message: "", type: "success" });
  const [theme, setTheme] = useState(() => {
    if (typeof window !== "undefined") {
      const savedTheme = localStorage.getItem("theme");
      if (savedTheme) return savedTheme;
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    return "dark";
  });

  // Refs
  const canvasRef = useRef(null);
  const fileInputRef = useRef(null);

  // Effects
  useEffect(() => {
    document.documentElement.classList.remove("light", "dark");
    document.documentElement.classList.add(theme);
  }, [theme]);

  useEffect(() => {
    const savedHistory = JSON.parse(localStorage.getItem("quantumSyncHistory") || "[]");
    const savedStats = JSON.parse(localStorage.getItem("quantumSyncStats") || '{"total": 0, "avgTime": 0, "successRate": 100}');
    const savedResumeWebhook = localStorage.getItem("resumeWebhook") || "";
    const savedInvoiceWebhook = localStorage.getItem("invoiceWebhook") || "";
    
    setHistory(savedHistory);
    setStats(savedStats);
    setResumeWebhook(savedResumeWebhook);
    setInvoiceWebhook(savedInvoiceWebhook);
  }, []);

  // Handlers
  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    if (canvasRef.current) {
      const ctx = canvasRef.current.getContext("2d");
      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
    }
  };

  return (
    <div className={`min-h-screen font-sans relative transition-all duration-300 ${
      theme === "dark" 
        ? "bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 text-white"
        : "bg-gradient-to-br from-blue-50 via-indigo-50 to-white text-slate-900"
    }`}>
      {/* Gradient Orbs */}
      <div className="fixed top-20 left-20 w-96 h-96 bg-blue-500/20 rounded-full mix-blend-multiply blur-3xl animate-pulse" />
      <div className="fixed bottom-20 right-20 w-96 h-96 bg-purple-500/20 rounded-full mix-blend-multiply blur-3xl animate-pulse" style={{ animationDelay: "1s" }} />

      {/* Toast Notification */}
      {toast.show && (
        <div className={`fixed top-6 right-6 z-50 px-6 py-4 rounded-xl shadow-2xl backdrop-blur-md border ${
          toast.type === "error" ? "bg-red-500/90 border-red-400" : "bg-emerald-500/90 border-emerald-400"
        } animate-slideIn`}>
          {toast.message}
        </div>
      )}

      {/* Theme toggle button */}
      <button
        onClick={toggleTheme}
        className={`fixed top-4 right-4 p-3 rounded-lg transition-all duration-300 ${
          theme === "dark"
            ? "bg-slate-700 hover:bg-slate-600 text-yellow-400"
            : "bg-blue-100 hover:bg-blue-200 text-slate-700"
        } z-50`}
      >
        {theme === "dark" ? <Sun size={24} /> : <Moon size={24} />}
      </button>

      {/* Main Content */}
      <div className="relative z-10 container mx-auto px-6 py-8">
        {/* Tab Navigation */}
        <div className="flex gap-4 mb-8 bg-slate-800/30 backdrop-blur-xl rounded-2xl p-2 border border-slate-700/50">
          {[
            { id: "stats", label: "Statistics", icon: BarChart },
            { id: "upload", label: "Upload", icon: Upload },
            { id: "config", label: "Settings", icon: Settings },
            { id: "history", label: "History", icon: Activity }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-1 flex items-center justify-center gap-3 px-6 py-4 rounded-xl font-semibold transition-all duration-300 ${
                activeTab === tab.id
                  ? "bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg shadow-blue-500/50"
                  : "text-slate-400 hover:text-white hover:bg-slate-700/50"
              }`}
            >
              <tab.icon className="w-5 h-5" />
              {tab.label}
            </button>
          ))}
        </div>

        {/* Content Area */}
        <div className="bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 p-6">
          {activeTab === "stats" && (
            <Statistics history={history} statsData={stats} theme={theme} />
          )}
          
          {activeTab === "history" && history.length > 0 && (
            <div className="space-y-4">
              {history.map((item, index) => (
                <div key={index} className="bg-slate-800/30 rounded-xl p-4 space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-slate-400">
                      {new Date(item.timestamp).toLocaleString()}
                    </div>
                    <div className={`px-4 py-2 rounded-full text-sm font-bold flex items-center gap-2 ${
                      item.status === "success" ? "bg-emerald-500/20 text-emerald-300" :
                      "bg-red-500/20 text-red-300"
                    }`}>
                      {item.status === "success" ? <CheckCircle className="w-4 h-4" /> : <XCircle className="w-4 h-4" />}
                      {item.status}
                    </div>
                  </div>
                  <div className="flex items-center gap-6 text-sm text-slate-400">
                    <span className="flex items-center gap-2">
                      <Box className="w-4 h-4" />
                      Type: {item.fileType}
                    </span>
                    <span className="flex items-center gap-2">
                      <Clock className="w-4 h-4" />
                      Time: {item.processingTime}ms
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}

          {activeTab === "upload" && (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="max-w-md w-full">
                <div className="flex items-center gap-3 mb-6">
                  <Box className="w-6 h-6 text-blue-400" />
                  <h2 className="text-2xl font-bold">Upload PDF Documents</h2>
                </div>
                {/* Upload content here */}
              </div>
            </div>
          )}
        </div>
      </div>

      <style>
        {`
          @keyframes slideIn {
            from {
              transform: translateX(400px);
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }
          .animate-slideIn {
            animation: slideIn 0.4s ease-out;
          }
        `}
      </style>
    </div>
  );
}
